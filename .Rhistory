main = "Speed vs Distance")
# Activity 2
data(cars)
print(head(cars, 10))
input <- cars[, c('speed', 'dist')]
plot(x = input$speed,y = input$dist,
xlab = "dist",
ylab = "speed",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Speed vs Distance")
plot(x = input$speed,y = input$dist,
xlab = "dist",
ylab = "speed",
xlim = c(0.5,1),
ylim = c(5,10),
main = "Speed vs Distance")
plot(x = input$speed,y = input$dist,
xlab = "dist",
ylab = "speed",
main = "Speed vs Distance")
source("C:/Users/USER/Course Application/gitdemo/Intro-to-Data-Science/Lab8b.R")
# Activity 2
data(cars)
print(head(cars, 10))
input <- cars[, c('speed', 'dist')]
plot(x = input$speed,y = input$dist,
xlab = "Distance",
ylab = "Speed",
main = "Speed vs Distance")
# Understand correlation analyses
x = c(1, 2, 3, 4, 5, 6, 7)
y = c(1, 3, 6, 2, 7, 4, 5)
result = cor(x, y, method = "pearson")
cat("Pearson coorelation coefficient is:", result)
############################################################
result = cor.test(x, y, method = "pearson")
print(result)
############################################################
install.packages("corrplot")
install.packages("RColorBrewer")
library(corrplot)
library(RColorBrewer)
M <- cor(mtcars)
corrplot(M, type="upper")
corrplot(M, type="upper", order="hclust")
corrplot(M, type="upper", order="hclust", col=brewer.pal(n=8, name="RdYlBu"))
############################################################
# Plotting Correlation with Heatmap
install.packages("lattice")
library(lattice)
data <- environmental
head(data)
corr_mat <- round(cor(data), 2)
head(corr_mat
)
dist <- as.dist((1-corr_mat)/2)
hc <- hclust(dist)
corr_mat <- corr_mat[hc$order, hc$order]
install.packages("reshape2")
library(reshape2)
melted_corr_mat <- melt(corr_mat)
head(melted_corr_mat)
############################################################
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + geom_text(aes(Var2, Var1, label=value), color="White", size=4)
############################################################
install.packages("heatmaply")
library(heatmaply)
heatmaply_cor(x=cor(data), xlab="Features", ylab="Features", k_col=2, k_row=2)
############################################################
install.packages("ggcorrplot")
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot::ggcorrplot(cor(data))
############################################################
mydata <- c(244, 753, 596, 645, 874, 141, 639, 465, 999, 654)
scale_data <- log(mydata)
print(scale_data)
############################################################
scale_data2 <- as.data.frame(scale(mydata))
print(scale_data2)
############################################################
install.packages("caret")
library(caret)
minmax <- preProcess(as.data.frame(mydata), method=c("range"))
scale_data3 <- predict(minmax, as.data.frame(mydata))
print(scale_data3)
############################################################
summary(data)
summary(scale_data)
summary(scale_data2)
summary(scale_data3)
myString <- "Hello, World!"
print(myString)
name <- readline(prompt="Enter name: ")
#convert charater in to numeric
age <- as.numeric(age)
print(paste("Hi", name, "this year you are", age, "years old."))
# Activity 1
weight <- readline(prompt = "Enter weight in kg: ")
weight <- as.numeric(weight)
height <- as.numeric(height)
BMI = weight /(height*height)
e <- "Underweight" <= 18.4
f <- "Normal"<=24.9
g <- "Overweight"<=39.9
h <- "Obese">=40.0
x <- BMI == g
print(x)
# Activity 2
string1 <- readline(prompt = "Enter string 1: ")
z <- "This program compare 2 string. Both inputs are similar: "
y <- string1 == string2
print(paste(z,y))
# Activity 3
a <- "Hi,"
b <- toupper("chalers . a")
c <- tolower("VERIFICATION CODE HAS BEEN SENT TO")
d <- "014 - 1234 8752"
print(paste(a,b,c, str_replace(d, "1234", "****"), sep=" ", collapse=" ",))
#Logical Operations
a = TRUE
b = FALSE
print(a&b)
print(a&!b)
print(a|b)
print(!a|b)
c = c(TRUE, FALSE)
d = c(FALSE, FALSE)
print(c&&d)
print(c||d)
v <- c(3, 1.5, TRUE)
t <- c(4, 2.1, FALSE)
print(!v)
print(!t)
print(v&t)
print(v|t)
print(v&&t)
print(v||t)
#Relational Operations
x = 5
y = 9
z = 2+3
print(x>y)
print(x<y)
print(x<=z)
print(y>=z)
print(x==z)
print(x!=y)
l <- c(2, 5.5, 6, 9)
m <- c(8, 2.5, 14, 9)
print(l>m)
print(l<m)
print(l<=m)
print(l>=m)
print(l==m)
print(l!=m)
#String Construction
e <- 'Start and end with single quote'
print(e)
f <- "Start and end with duoble quotes"
print(f)
g <- "Single quote ' in between duoble quotes"
print(g)
h <- 'Double quotes " in between single quote'
print(h)
#Escape Characters
str <- "We are the so-called \"Vikings\", from the north."
cat(str)
str <- "We are the so-called \\Vikings\\, from the north."
cat(str)
str <- "We are the \r so-called Vikings \n from the north."
cat(str)
str <- "\t We are the so-called Vikings from the north."
cat(str)
#Concatenating Strings
o <- "Hello"
p <- 'How'
q <- "are you?"
print(paste(o,p,q))
print(paste(o,p,q, sep = "-"))
print(paste(o,p,q, sep = " ", collapse = " "))
#Formatting numbers & strings
# Total number of digits displayed. Last digit rounded off.
result <- format(23.123456789, digits = 9)
print(result)
# Display numbers in scientific notation.
result <- format(c(6, 13.14521, scientific = TRUE))
print(result)
# The minimum number of digits to the right of the decimal point.
result <- format(23.47, nsmall = 5)
print(result)
# Format treats everything as a string.
result <- format(6)
print(result)
# Numbers are padded with blank in the beginning for width.
result <- format(13.7, width = 6)
print(result)
# Left justify strings.
result <- format("Hello", width = 8, justify = "l")
print(result)
# Justify string with center.
result <- format("Hello", width = 8, justify = "c")
print(result)
# Right justify strings.
result <- format("Hello", width = 8, justify = "r")
print(result)
#Counting number of characters in a string
str <- ("Count the number of characters")
result <- nchar(str)
print(result)
# Installing and importing package (only done once)
install.packages("stringr")
library(stringr)
# Calculating length of string
str_length(str)
#Changing the case
result <- toupper("Changing To Upper")
print(result)
result <- tolower("Changing To Lower")
print(result)
#Extracting parts of a string
# Extract characters from 5th to 7th position.
result <- substring("Extract", 5, 7)
print(result)
# Extract characters in 1st position.
result <- substr("Learn Code Tech", 1, 1)
print(result)
# Vector construction
v <- 5:13
print(v)
v <- 6.6:12.6
print(v)
v <- 3.8:11.4
print(v)
print(seq(5, 9, by = 0.4))
s <- c('apple', 'red', 5, TRUE)
print(s)
# Accessing Vector Elements
t <- c("Sun", "Mon", "Tue", "Wed", "Thurs", "Fri", "Sat")
u <- t[c(2,3,6)]
print(u)
v <- t[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE)]
print(v)
x <- t[c(-2,-5)]
print(x)
y <- t[c(0,0,0,0,0,0,1)]
print(y)
# Vector Manipulation
v1 <- c(3,8,4,5,0,11)
v2 <- c(4,11,0,8,1,2)
add.result <- v1 + v2
print(add.result)
sub.result <- v1 - v2
print(sub.result)
multi.result <- v1 * v2
print(multi.result)
divi.result <- v1/v2
print(divi.result)
# Vector Element Recycling
v1 <- c(3,8,4,5,0,11)
v2 <- c(4,11)
add.result <- v1 + v2
print(add.result)
sub.result <- v1 - v2
print(sub.result)
# Vector Element Sorting
v <- c(3,8,4,5,0,11,-9,304)
sort.result <- sort(v)
print(sort.result)
revsort.result <- sort(v, decreasing = TRUE)
print(revsort.result)
v <- c("Red","Blue","Yellow","Violer")
sort.result <- sort(v)
print(sort.result)
revsort.result <- sort(v, decreasing = TRUE)
print(revsort.result)
# List Construction
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
list_data <- list(c("Jan","Feb","Mar"), list("Green",12.3))
names(list_data) <- c("1st Quarter", "A Inner list")
print(list_data)
# Accessing List Elements
list_data <- list(c("Jan", "Feb", "Mar"), list("green", 12.3))
names(list_data) <- c("1st_Quarter", "A_Inner_list")
print(list_data[1])
print(list_data[2])
print(list_data$A_Inner_list)
print(which(list_data$'1st_Quarter' == "Feb"))
# List Manipulation
list_data <- list(c("Jan", "Feb", "Mar"), list("green", 12.3))
names(list_data) <- c("1st_Quarter", "A_Inner_list")
list_data[3] <- "New_elemet"
print(list_data[3])
list_data <- NULL
print(list_data[3])
list_data[2] <- "updated_element"
print(list_data[2])
# Activity 1
vector <- c(33, 24, 54, 94, 16, 89, 60, 6, 77, 61, 13, 44, 26, 24, 73, 73, 90, 39, 90, 54)
list_data <- list(c("90-100", "80-89", "70-79", "60-69", "50-59", "<=49"),
list(c("A", "B", "C", "D", "E", "F")))
names(list_data) <- c("Score", "Grade")
list_data[3] <- "Number of Students"
sort.result <- sort(vector)
print(sort.result)
# Activity 2
list_data <- list(c("Robert", "Hemsworth", "Scarlett", "Evans", "Pratt", "Larson", "Holland", "Paul", "Simu", "Renner"),
list(c(59, 71, 83, 68, 65, 57, 62, 92, 92, 59)))
names(list_data) <- c("Student_Name", "Exam_Score")
df <- data.frame(Student_Name = c("Robert", "Hemsworth", "Scarlett", "Evans", "Pratt", "Larson", "Holland", "Paul", "Simu", "Renner"),
Exam_Score = c(59, 71, 83, 68, 65, 57, 62, 92, 92, 59))
print(df)
print(paste("Highest score: ", max(df$Exam_Score)))
print(paste("Lowest score: ", min(df$Exam_Score)))
print(paste("Average score: ", mean(df$Exam_Score)))
# Activity 3
Student_Name <- c("Robert", "Hemsworth", "Scarlett", "Evans", "Pratt", "Larson", "Holland", "Paul", "Simu", "Renner")
Chemistry <- c(59, 71, 83, 68, 65, 57, 62, 92, 92, 59)
Physics <- c(89, 86, 65, 52, 60, 67, 40, 77, 90, 61)
df2 <- data.frame(Student_Name, Chemistry, Physics)
dfMerage = merge(x = df, y = df2, by = "Student_Name", all.x = TRUE)
library(dplyr)
best_score = dfMerage %>% filter(Chemistry <= 49 & Physics <= 49)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
best_score = dfMerage %>% filter(Chemistry <= 49 & Physics <= 49)
print(best_score)
print(paste("Chemistry Highest score: ", max(dfMerage$Chemistry)))
print(paste("Physics Highest score: ", max(dfMerage$Physics)))
# Activity 1
age = c(55, 57, 56, 52, 51, 59, 58, 53, 59, 55, 60, 60, 60, 60, 52, 55, 56, 51, 60, 52, 54, 56, 58, 53, 53, 50, 55, 51, 57, 60, 57, 55, 51, 50, 57, 58)
#Apply the factor function
factor_age <- factor(age)
print(factor_age)
#Creating table
data_StaffAge <- data.frame(Staff_Age = levels(factor_age),
Total_number_of_staff = c(2,4,4,3,2,5,4,5,3,2,6))
data_AgeRange <- data.frame(Age_Range = c("50-52", "52-54", "54-56", "56-58", "58-60"),
Total_number_of_staff = c(10, 9, 11, 12, 11))
# Activity 2
V1 = c(2, 3, 1, 5, 4, 6, 8, 7, 9)
#Rename column and row
rownames <- c("row1", "row2", "row3")
colnames <- c("col1", "col2", "col3")
#Create 3x3 matrix
Matrix1 <- matrix(V1, nrow = 3, ncol = 3, byrow = TRUE, dimnames = list(rownames, colnames))
#Transpose of matrix
Matrix2 <- t(Matrix1)
#Add, Subtract, Multiply, Divide the matrix
add <- Matrix1 + Matrix2
cat("Result of addition", "\n")
print(add)
subtract <- Matrix1 - Matrix2
cat("Result of subtraction", "\n")
print(subtract)
multiply <- Matrix1 * Matrix2
cat("Result of multiplication", "\n")
print(multiply)
divide <- Matrix1 / Matrix2
cat("Result of division", "\n")
print(divide)
# Activity 3
#Create array 1
Vector1 <- c(1, 2, 3, 4, 5, 6, 7, 8)
Vector2 <- c(9, 10, 11, 12, 13, 14, 15, 16)
Vector3 <- c(17, 18, 19, 20, 21, 22, 23, 24)
array1 <- array(c(Vector1, Vector2, Vector3), dim = c(2, 4, 3)) #dim arrange in order row, col, table
cat("Array 1", "\n")
print(array1)
#Create array 2
Vector4 <- c(25, 26, 27, 28, 29, 30)
Vector5 <- c(31, 32, 33, 34, 35, 36)
Vector6 <- c(37, 38, 39, 40, 41, 42)
Vector7 <- c(43, 44, 45, 46, 47, 48)
Vector8 <- c(49, 50, 51, 52, 53, 54)
array2 <- array(c(Vector4, Vector5, Vector6, Vector7, Vector8), dim = c(3, 2, 5))
cat("Array 2", "\n")
print(array2)
#Print 2nd row of 2nd matrix of the 1st array
cat("The second row of the second matrix of the array:", "\n")
print(array1[2,,2])
#Print 3rd row of and 3rd column of the 1st matrix of the 2nd array
cat("The element in the 3rd row and 3rd column of the 1st matrix:", "\n")
print(array2[3,2,1])
# If-statement
x <- 30L
if(is.integer(x)) { #Check c is integer or not
print("X is an Integer")
}
# If-else statement
x <- c("What", "is", "truth")
if("Truth" %in% x){
print("Truth is found")
} else{
print("Truth is not found")
}
# If-else-if-else statement
x <- c("What", "is", "truth")
if("Truth" %in% x){
print("Truth is found the first time")
} else if("truth" %in% x){
print("truth is found the second time")
} else{
print("No truth found")
}
# Switch case statement
x <- switch(
3, #option that need to choose
"first",
"second",
"third",
"fourth"
)
print(x)
# Repeat loop
v <- c("Hello", "loop")
cnt <- 2
repeat{
print(v)
cnt <- cnt + 1
if(cnt > 5){
break
}
}
# While loop
v <- c("Hello", "while loop")
cnt <- 2
while (cnt < 7){
print(v)
cnt = cnt + 1
}
# For loop
v <- LETTERS[1:4]
for(i in v){
print(i)
}
for(x in 1:10){
print(x)
}
fruits <- list("apple", "banana", "cherry")
for(x in fruits){
print(x)
}
for(x in fruits){
if(x == "cherry"){
break
}
}
for(x in fruits){
if(x == "banana"){
next
}
print(x)
}
dice <- 1:6
for(x in dice){
if(x == 6){
print(paste("The dice number is", x, "Yahtzee!"))
} else{
print(paste("The dice number is", x, "Not Yahtzee"))
}
}
adj <- list("red", "big", "tasty")
fruits <- list("apple", "banana", "cherry")
for(x in adj){
for(y in fruits){
print(paste(x, y))
}
}
# Activity 1
year <- as.integer(readline(prompt = "Input year: "))
if((year %% 100) == 0){
if((year %% 400) == 0){
print(paste("Output:", year, "is a leap year."))
} else {
print(paste("Output:", year, "is not a leap year."))
}
} else {
print(paste("Output:", year, "is a leap year."))
}
# Activity 2
num = as.integer(readline(prompt="Input an integer: "))
print(paste("Number is:", x, "and the number of", x, " is: ", x ** 3))
# Activity 3
cat("Check whether an n digits number is Armstrong or not.", "\n")
cat("--------------------------------------------------------", "\n")
n = as.integer(readline(prompt="Input an integer: "))
temp = n
while(temp > 0) {
digit = temp %% 10
sum = sum + (digit ^ 4)
temp = floor(temp/10)
}
if(n == sum) {
print(paste(n,"is an Armstrong number."))
} else {
print(paste(n,"is not an Armstrong number."))
}
r version
?r version
r
sessionInfo()
install.packages("installr")
library(installr)
updateR()
packageStatus()
