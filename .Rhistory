dfCleaned[7,4] <- NA
dfCleaned[8,4] <- 1.0523
dfCleaned[9,4] <- -99
dfCleaned[10,4]<- NA
#Check for missing values (NA)
is.na(dfCleaned)
# Part 3
#Create new dataframe from dfCleaned and name it dfSummaryCleaned
dfSummaryCleaned = dfCleaned
#Remove the missing (NA) values
na.omit(dfSummaryCleaned)
dfSummaryCleaned = dfSummaryCleaned[-c(4,6,7,10),]
# Part 4
dfCleaned <- as.numeric()
#for pie chart
lbl = dfCleaned$Var1
# Part 4
#for pie chart
lbl = dfCleaned$Var1
# Part 1
#To import database from computer
q1_dataset <- read.csv("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Assignment/q1_dataset.csv")
#To summarize all the data from database
summary(q1_dataset)
# To show the number of row
row = nrow(q1_dataset)
library(dplyr)
# To get the minimum value
min(q1_dataset$Var1)
min(q1_dataset$Var2)
min(q1_dataset$Var3)
min(q1_dataset$Var4)
min(q1_dataset$Var5)
min(q1_dataset$Var6)
min(q1_dataset$Var7)
min(q1_dataset$Var8)
min(q1_dataset$Var9)
min(q1_dataset$Var10)
# To get the maximum value
max(q1_dataset$Var1)
max(q1_dataset$Var2)
max(q1_dataset$Var3)
max(q1_dataset$Var4)
max(q1_dataset$Var5)
max(q1_dataset$Var6)
max(q1_dataset$Var7)
max(q1_dataset$Var8)
max(q1_dataset$Var9)
max(q1_dataset$Var10)
# To summarize all the number of empty cell
q1_dataset %>% summarise_if(is.numeric, ~sum(is.na(.)), na.rm = TRUE)
# To conclude all the data for data frame
Row = c(600, 600, 600, 600, 600, 600, 600, 600, 600, 600)
Min = c(1, 60, 3e-05, "NA", 0.000753, "OFF", "NA", 1.02, -99, "NA")
Max = c(10, 499, 101.3, "NA", 0.428, "ON", "NA", 1.08, -99, "NA")
NAN = c(1, 0, 0, 0, 9, 0, 5, 0, 0, 11)
# To create a data frame
dfSummaryOriginal <- data.frame(Row, Min, Max, NAN)
# To change the row names
row.names(dfSummaryOriginal) <- c("Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10")
# Part 2
#To create a new data frame named dfCleaned from dfSummaryOriginal
dfCleaned = dfSummaryOriginal
#Access the element in the 6th row and 2nd column
dfCleaned[6,2]
#Change the value of the element from "OFF" to 0
dfCleaned[6,2] <- 0
#Access the element in the 6th row and 3rd column
dfCleaned[6,3]
#Change the value of the element from "ON" to 1
dfCleaned[6,3] <- 1
#Calculate the average value for the empty cells (NAN)
mean(q1_dataset$Var1)
mean(q1_dataset$Var2)
mean(q1_dataset$Var3)
mean(q1_dataset$Var4)
mean(q1_dataset$Var5)
mean(q1_dataset$Var6)
mean(q1_dataset$Var7)
mean(q1_dataset$Var8)
mean(q1_dataset$Var9)
mean(q1_dataset$Var10)
#Replace the NAN values with the average values
dfCleaned[1,4] <- 5.403333
dfCleaned[2,4] <- 81.67833
dfCleaned[3,4] <- 4.624634
dfCleaned[4,4] <- NA
dfCleaned[5,4] <- 0.2159361
dfCleaned[6,4] <- NA
dfCleaned[7,4] <- NA
dfCleaned[8,4] <- 1.0523
dfCleaned[9,4] <- -99
dfCleaned[10,4]<- NA
#Check for missing values (NA)
is.na(dfCleaned)
# Part 3
#Create new dataframe from dfCleaned and name it dfSummaryCleaned
dfSummaryCleaned = dfCleaned
#Remove the missing (NA) values
na.omit(dfSummaryCleaned)
dfSummaryCleaned = dfSummaryCleaned[-c(4,6,7,10),]
# Part 4
#for pie chart
lbl = dfCleaned$Var1
val2 = dfCleaned$Var7[1:30]
pie(val2, lbl, cex = 1)
#Scatter Plot
x <- dfCleaned$Var1
y <- dfCleaned$Var9
plot(x, y, xlab = 'x', ylab = 'y', col = 'Black')
#bar graph
val3 = c(mean(dfCleaned$Var2), mean(dfCleaned$Var3), mean(dfCleaned$Var7), mean(dfCleaned$Var9), mean(dfCleaned$Var10))
barplot(val3, dfCleaned$Var1[1:50], xlab = "Var1", ylab = "Mean for each var", cex.names = 2, las = 2, col ="orange")
#bar graph
mean(dfCleaned$Var2)
barplot(val3, dfCleaned$Var1[1:50], ylab = "Mean for each var", cex.names = 2, las = 2, col ="orange")
# Part 4
#for pie chart
lbl = dfCleaned$Var1
val2 = dfCleaned$Var7[1:30]
pie(val2, lbl, cex = 1)
# Part 4
#for pie chart
lbl = dfCleaned$Var1
val2 = dfCleaned$Var7[1:30]
pie(as.numeric(val2, lbl, cex = 1))
# Part 4
#for pie chart
lbl = dfCleaned$Var1
val2 = dfCleaned$Var7[1:30]
pie(as.numeric(c(val2, lbl, cex = 1)))
val2 = dfCleaned$Var7[1:30]
# Part 4
#for pie chart
lbl = as.numeric(dfCleaned$Var1)
val2 = as.numeric(dfCleaned$Var7[1:30])
pie(val2, lbl, cex = 1)
#Scatter Plot
x <- dfCleaned$Var1
y <- dfCleaned$Var9
plot(x, y, xlab = 'Var1', ylab = 'Var9', col = 'Black')
#bar graph
val1=dfCleaned$Var1
Var2=row.names(dfCleaned)
barplot(val1,ylab='Value',main="Bar Chart",names.arg= Var2, cex.names=0.6,las=2,col="blue")
# Part 4
#for pie chart
lbl = dfCleaned$Var1
val2 = dfCleaned$Var7[1:10]
pie(val2, lbl, cex = 1)
#Scatter Plot
x <- dfCleaned$Var1
y <- dfCleaned$Var9
plot(x, y, xlab = 'Var1', ylab = 'Var9', col = 'Black')
#bar graph
val3 = c(mean(dfCleaned$Var2), mean(dfCleaned$Var3), mean(dfCleaned$Var7), mean(dfCleaned$Var9), mean(dfCleaned$Var10))
# Part 4
#for pie chart
lbl = dfCleaned$Var1
val2 = dfCleaned$Var7
pie(val2, lbl, cex = 1)
# Part 4
#for pie chart
lbl = dfSummaryOriginal$Var1
val2 = dfSummaryOriginal$Var7
pie(val2, lbl, cex = 1)
# Part 4
#for pie chart
lbl = dfSummaryOriginal$Var1
val2 = dfSummaryOriginal$Var7[1:30]
pie(val2, lbl, cex = 1)
View(dfSummaryOriginal)
# Part 4
#for pie chart
lbl = dfSummaryOriginal$Var1
val2 = dfSummaryOriginal$Var8[1:30]
pie(val2, lbl, cex = 1)
# Part 4
#for pie chart
lbl = dfSummaryOriginal$Var1
val2 = dfSummaryOriginal$Var8[1:30]
pie(val2, lbl, cex = 1)
#Scatter Plot
x <- dfCleaned$Var1
y <- dfCleaned$Var9
plot(x, y, xlab = 'Var1', ylab = 'Var9', col = 'Black')
#bar graph
val3 = c(mean(dfCleaned$Var2), mean(dfCleaned$Var3), mean(dfCleaned$Var5), mean(dfCleaned$Var8), mean(dfCleaned$Var9))
barplot(val3, dfCleaned$Var1[1:50], xlab = "Var1", ylab = "Mean for each var", cex.names = 2, las = 2, col ="orange")
#bar graph
mean(dfCleaned$Var2)
#bar graph
mean(q1_dataset$Var2)
val3 = c(mean(q1_dataset$Var2), mean(q1_dataset$Var3), mean(q1_dataset$Var5), mean(q1_dataset$Var8), mean(q1_dataset$Var9))
barplot(val3, q1_dataset$Var1[1:50], xlab = "Var1", ylab = "Mean for each var", cex.names = 2, las = 2, col ="orange")
barplot(val3, q1_dataset$Var1[1:100], xlab = "Var1", ylab = "Mean for each var", cex.names = 2, las = 2, col ="orange")
val3 = c(mean(q1_dataset$Var2), mean(q1_dataset$Var3), mean(q1_dataset$Var5), mean(q1_dataset$Var8), mean(q1_dataset$Var9))
barplot(val3, q1_dataset$Var1[1:100], xlab = "Var1", ylab = "Mean for each var", cex.names = 2, las = 2, col ="orange")
barplot(val3, q1_dataset$Var1[1:100], xlab = "Var1", ylab = "Mean for each var", cex.names = 2, las = 2, col ="orange")
barplot(val3, q1_dataset$Var1[1:30], xlab = "Var1", ylab = "Mean for each var", cex.names = 2, las = 2, col ="orange")
barplot(val3, q1_dataset$Var1[1:50], xlab = "Var1", ylab = "Mean for each var", cex.names = 2, las = 2, col ="orange")
barplot(val3, xlab = "Var1", ylab = "Mean for each var", cex.names = 2, las = 2, col ="orange")
barplot(val3, ylab = "Mean for each var",  main = "Var1", cex.names = 0.6, las = 2, col ="orange")
barplot(val3, ylab = "Mean for each var",  main = "Var1", cex.names = 2, las = 2, col ="orange")
#Scatter Plot
x <- q1_datase$Var1
y <- q1_datase$Var9
#Scatter Plot
x <- q1_dataset$Var1
y <- q1_dataset$Var9
plot(x, y, xlab = 'Var1', ylab = 'Var9', col = 'Black')
# Part 4
#for pie chart
lbl = q1_dataset$Var1
val2 = q1_dataset$Var8[1:30]
pie(val2, lbl, cex = 1)
# Part 4
#for pie chart
lbl = q1_dataset$Var1
val2 = q1_dataset$Var8[1:30]
pie(val2, lbl, cex = 1)
#Scatter Plot
x <- q1_dataset$Var1
y <- q1_dataset$Var9
plot(x, y, xlab = 'Var1', ylab = 'Var9', col = 'Black')
#bar graph
val3 = c(mean(q1_dataset$Var2), mean(q1_dataset$Var3), mean(q1_dataset$Var5), mean(q1_dataset$Var8), mean(q1_dataset$Var9))
barplot(val3, ylab = "Mean for each var",  main = "Var1", cex.names = 2, las = 2, col ="orange")
# Part 4
#for pie chart
lbl = q1_dataset$Var1
val2 = q1_dataset$Var8[1:30]
pie(val2, lbl, cex = 1)
#Scatter Plot
x <- q1_dataset$Var1
y <- q1_dataset$Var9
plot(x, y, xlab = 'Var1', ylab = 'Var9', col = 'Black')
#bar graph
val3 = c(mean(q1_dataset$Var2), mean(q1_dataset$Var3), mean(q1_dataset$Var5), mean(q1_dataset$Var8), mean(q1_dataset$Var9))
barplot(val3, ylab = "Mean for each var",  main = "Var1", cex.names = 2, las = 2, col ="orange")
# Activity 1
df1 <- data.frame(
name = c("Anastasia", "Dima", "Michael", "Matthew", "Laura", "Kelvin", "Jonas"),
score = c(12.5, 9.0, 16.5, 12.0, 9.0, 8.0, 19.0),
attempts = c(1, 3, 2, 3, 2, 1, 2)
)
View(df1)
# Activity 2
df1$qualify <- c("yes", "no", "yes", "no", "no", "no", "yes")
View(df1)
# Activity 3
#Create a new data frame
df2 <- data.frame(
name = ("Emily"),
score = (14.5),
attempts = (1),
qualify = ("yes")
)
#Bind the two data frame
df <- rbind(df1, df2)
View(df)
# Activity 4
#Display the structure
str(df)
#Display the summary
dim(df)
ncol(df)
nrow(df)
#Display the rows and column
summary(df)
# Activity 1
df1 <- data.frame(
name = c("Anastasia", "Dima", "Michael", "Matthew", "Laura", "Kelvin", "Jonas"),
score = c(12.5, 9.0, 16.5, 12.0, 9.0, 8.0, 19.0),
attempts = c(1, 3, 2, 3, 2, 1, 2)
)
View(df1)
# Activity 1
df1 <- data.frame(
name = c("Anastasia", "Dima", "Michael", "Matthew", "Laura", "Kelvin", "Jonas"),
score = c(12.5, 9.0, 16.5, 12.0, 9.0, 8.0, 19.0),
attempts = c(1, 3, 2, 3, 2, 1, 2)
)
View(df1)
# Activity 2
#Add a 'qualify' column
df1$qualify <- c("yes", "no", "yes", "no", "no", "no", "yes")
View(df1)
# Activity 2
#Add a 'qualify' column
df1$qualify <- c("yes", "no", "yes", "no", "no", "no", "yes")
View(df1)
# Activity 3
#Create a new data frame
df2 <- data.frame(
name = ("Emily"),
score = (14.5),
attempts = (1),
qualify = ("yes")
)
#Bind the two data frame
df <- rbind(df1, df2)
View(df2)
View(df)
# Activity 4
#Display the structure
str(df)
#Display the summary
summary(df)
#Display the rows and column
ncol(df)
nrow(df)
library(readxl)
Lab_7_uforeport <- read_excel("~/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_uforeport.xls")
View(Lab_7_uforeport)
any(grepl("readxl", installed.packages()))
# Installing library
#Verfy package installing
any(grepl("readxl", installed.packages()))
library(readxl)
?read_excel
#Identify and setting the folder path
getwd()
#Identify and setting the folder path
getwd()
# Import excel file
dataset <- read_excel("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_uforeport.xls")
titanic <- read_excel("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_titanic.csv")
titanic <- read_excel("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_titanic.csv")
titanic <- read_excel("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab Lab 7_uforeport.xls")
getwd()
titanic <- read_excel("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_uforeport.xls")
titanic <- read_csv("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_titanic.csv")
titanic <- read_csv("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_titanic.csv")
titanic <- read.csv("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_titanic.csv")
View(titanic)
# Import excel file
uforeport <- read_excel("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_uforeport.xls")
View(dataset)
# Installing library
#Verfy package installing
any(grepl("readxl", installed.packages()))
library(readxl)
?read_excel
#Identify and setting the folder path
getwd()
# Import excel file
uforeport <- read_excel("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_uforeport.xls")
titanic <- read.csv("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_titanic.csv")
library(readxl)
Lab_7_uforeport <- read_excel("~/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_uforeport.xls")
View(Lab_7_uforeport)
# Identify empty cells in data frame
#To count out the total NA values
sum(is.na(uforeport))
sum(is.na(titanic))
#To get the position where NA values are
which(is.na(uforeport))
which(is.na(titanic))
#TO see how it work in smaller dataset
demo = c(1, 2, NA, 4, Ns, 6, 7)
#TO see how it work in smaller dataset
demo = c(1, 2, NA, 4, NA, 6, 7)
sum(is.na(demo))
which(is.na(demp))
which(is.na(demo))
#Get count of NA in each column
print(sapply(uforeport, function(x) sum(is.na(x))))
print(sapply(titanic, function(x) sum(is.na(x))))
print(sapply(titanic, function(x) sum(is.na(x))))
print(sapply(demo, function(x) sum(is.na(x))))
print(sapply(demo, function(x) sum(is.na(x))))
View(uforeport)
View(titanic)
#Managing empty values in data frame
dim(uforeport)
uforeport_cleaned = na.omit(uforeport)
dim(uforeport_cleaned)
dim(titanic)
titanic_cleaned = na.omit(titanic)
dim(titanic_cleaned)
dim(demo)
demp_cleaned = na.omit(demo)
dim(demo_cleaned)
demo_cleaned = na.omit(demo)
dim(demo_cleaned)
#Get column name
colnames(uforeport_cleaned)
colnames(titanic_cleaned)
#OR
name(uforeport_cleaned)
name(titanic_cleaned)
#OR
names(uforeport_cleaned)
names(titanic_cleaned)
#Renaming unconventional variable names
name(uforeport_cleaned)
#Renaming unconventional variable names
names(uforeport_cleaned)
#Replace blank with underscore
names(uforeport_cleaned) = gsub(" ", "_", colnames(uforeport_cleaned))
names(uforeport)cleaned
names(uforeport_cleaned)
# Filtering values in data frame
print(filter(uforeport_cleaned, City == "Belton"))
print(filter(uforeport_cleaned, Colors_Reorted == "Green"))
print(filter(titanic_cleaned, sex == "female"))
print(filter(titanic_cleaned, fare > 500))
View(titanic_cleaned)
View(uforeport_cleaned)
# Filtering values in data frame
print(filter(uforeport_cleaned, City == "Belton"))
# Filtering values in data frame
print(filter(uforeport_cleaned, city == "Belton"))
# Searching in data frame
print(filter(titanic_cleaned, sex == 'female' & fare > 500))
# Searching in data frame
print(filter(titanic_cleaned, sex == 'female' & fare > 500))
# Filtering values in data frame
print(filter(uforeport_cleaned, City == 'Belton'))
print(filter(uforeport_cleaned, Colors_Reported == 'GREEN'))
print(filter(titanic_cleaned, sex == 'female'))
# Filtering values in data frame
print(filter(uforeport_cleaned,City == 'Belton'))
titanic_cleaned %>% filter(sex == 'female', fare > 500)
ufo_green = uforeport_cleaned %>% filter(Colors_Reported == 'GREEN')
# Filtering values in data frame
library(dplyr)
#Get column name
colnames(uforeport_cleaned)
colnames(titanic_cleaned)
#OR
names(uforeport_cleaned)
names(titanic_cleaned)
#Renaming unconventional variable names
names(uforeport_cleaned)
#Replace blank with underscore
names(uforeport_cleaned) = gsub(" ", "_", colnames(uforeport_cleaned))
names(uforeport_cleaned)
# Filtering values in data frame
print(filter(uforeport_cleaned, City == 'Belton'))
print(filter(uforeport_cleaned, Colors_Reported == 'GREEN'))
print(filter(titanic_cleaned, sex == 'female'))
print(filter(titanic_cleaned, fare > 500))
# Searching in data frame
print(filter(titanic_cleaned, sex == 'female' & fare > 500))
titanic_cleaned %>% filter(sex == 'female', fare > 500)
ufo_green = uforeport_cleaned %>% filter(Colors_Reported == 'GREEN')
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# Arrange values in data frame
#Sorting by values in columns
titanic_sortbyfare = arrange(titanic_cleaned, fare)
titanic_sortbyfare = arrange(titanic_cleaned, desc(fare))
View(titanic_cleaned)
# Arrange values in data frame
#Sorting by values in columns
titanic_sortbyfare = arrange(titanic_cleaned, fare)
View(titanic_sortbyfare)
# Arrange values in data frame
#Sorting by values in columns
titanic_sortbyfare_asc = arrange(titanic_cleaned, fare)
titanic_sortbyfare_decs = arrange(titanic_cleaned, desc(fare))
View(titanic_sortbyfare_asc)
View(titanic_sortbyfare_decs)
View(titanic_sortbyfare_decs)
# Exporting data frame to excel and csv
install.packages("xlsx")
library(xlsx)
write.xlsx(ufo_green, "ufo_green.xlsx")
write.csv(titanic_sortbyfare_asc, "titanic_sortbyfare_asc.csv")
View(ufo_green)
# Activity 1
#Import different type of data file
uforeport <- read_excel("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_uforeport.xls")
# Activity 1
#Import different type of data file
library(readxl)
uforeport <- read_excel("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_uforeport.xls")
titanic <- read.csv("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_titanic.csv")
#Clean the data
dim(uforeport)
uforeport_cleaned = na.omit(uforeport)
dim(uforeport_cleaned)
dim(titanic)
titanic_cleaned = na.omit(titanic)
dim(titanic_cleaned)
View(uforeport_cleaned)
View(uforeport)
# Activity 1
#Import different type of data file
library(readxl)
uforeport <- read_excel("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_uforeport.xls")
View(uforeport)
titanic <- read.csv("C:/Users/USER/OneDrive/Documents/Undergraduate/Year 2/SEM 2/Introduction to Data Science/Database/Lab 7_titanic.csv")
View(titanic)
#Clean the data
dim(uforeport)
uforeport_cleaned = na.omit(uforeport)
dim(uforeport_cleaned)
View(uforeport_cleaned)
dim(titanic)
titanic_cleaned = na.omit(titanic)
dim(titanic_cleaned)
View(titanic_cleaned)
View(uforeport)
View(titanic)
View(uforeport_cleaned)
View(titanic_cleaned)
# Activity 2
str(uforeport_cleaned)
